When would you want to use a remote repository rather than keeping all your
work local?

  I can think of two main reasons for having a remote repository. The first one
  is, that you have a backup of your work, so in case of some kind of damage to
  the local data, the data will always be somewhere else too.
  The second reason is, if you want to collaborate with others, it's a
  convenient way to share and transmit changes to one another, whilst keeping
  it possible to work at the same time.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

  Maybe if you are in the middle of working on something you don't want new
  Code and stuff coming in all the time. It just leaves you the freedom to
  decide by yourself when you want to update your local repository.

Describe the differences between forks, clones, and branches. When would you
use on instead of another?

  Branches are like different paths in one repository. For example you could
  checkout a branch at one commit and then work on your new branch while not
  changing any of the code in the old branch and later merge them together.

  A clone is a complete copy of a repository, also including possible branches.

  A fork is a special type of clone on GitHub, which keeps track of who's
  repository it originally was and creates a link from the forked version
  back to the original.

What is the benefit of having a copy of the last known state of the remote
stored locally?

  When you have a copy of the last known state of the remote stored locally,
  it's easier to track what changes were made locally and at the remote
  repository. Having one of these enables git to decide whether a fast merge
  is possible or a normal merge is needed.

How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?

  In the past I collaborated just by splitting up the tasks, so we would create
  conflicts while working on the project and then later manually change out the
  files at our respective computers. This meant, that you only were allowed to
  work on files after communicating and distributing the changes always was a
  tedious and error creating task. I did this with Google Drive and just plain
  USB-Sticks passing the files around. Since I never collaborated with more
  than two other persons, that still was okay, but when I imagine doing that
  with more people, that wouldn't work for sure.

When would you want to make changes in a separate branch rather than directly
in master? What benefits does each approach have?

  I usually want master to be a clean and working version of my project. So
  whenever I develop something new, maybe start out on a new feature, or
  or something similar, it would make sense to start out on a new branch.

  Branches can also help reviewing code changes for collaborators, so it makes
  sense not to directly modify to master branch, but to make the changes in a
  new branch and create a pull request to make sure my collaborators get
  notified of the changes and can also help me finding mistakes.

  The problem with making the changes in a separate branch and possibly also
  creating a pull request is, that it is more complicated, since it takes a few
  steps instead of just committing to master and directly pushing.
